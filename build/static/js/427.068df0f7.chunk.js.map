{"version":3,"file":"static/js/427.068df0f7.chunk.js","mappings":"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","sources":["services/validator/auth.validator.ts","webpack://easy-tourney-fe/./src/pages/Login/Login.module.css?b420","pages/Login/Login.tsx","apis/axios/auth/login.ts","constants/regex.ts","services/validator/common.ts"],"sourcesContent":["import * as Yup from \"yup\";\r\nimport { email, password } from \"./common\";\r\n\r\nexport const LoginSchema = Yup.object().shape({\r\n\temail,\r\n\tpassword,\r\n});\r\n","// extracted by mini-css-extract-plugin\nexport default {\"login-container\":\"Login_login-container__Xu7Q-\",\"login-wrapper\":\"Login_login-wrapper__Ca5Mf\",\"login-form\":\"Login_login-form__UrnjB\",\"login-title\":\"Login_login-title__CPHLw\",\"error-message\":\"Login_error-message__zmS0-\",\"login-alert-message\":\"Login_login-alert-message__NDLdD\",\"submit-login-btn\":\"Login_submit-login-btn__GkgK8\"};","import React, { useEffect, useState } from 'react'\r\nimport { Formik, Field, Form, ErrorMessage, FormikProps } from 'formik'\r\nimport { LoginSchema } from '../../services/validator/auth.validator'\r\nimport { Alert, Box, Button, IconButton, InputAdornment, Stack, TextField } from '@mui/material'\r\nimport { LoginForm } from './Login.types'\r\nimport { LockOutlined, PersonOutline, Visibility, VisibilityOff } from '@mui/icons-material'\r\nimport styles from './Login.module.css'\r\nimport { loginRequest } from '../../apis/axios/auth/login'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { login } from '../../redux/reducers/auth/auth.reducer'\r\nimport { VscLoading } from 'react-icons/vsc'\r\n\r\nconst Login: React.FC = () => {\r\n  const [showPassword, setShowPassword] = useState(false)\r\n  const navigate = useNavigate()\r\n  const [error, setError] = useState(false)\r\n  const dispatch = useDispatch()\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  const handleSubmitForm = async (values: LoginForm, { resetForm }: { resetForm: () => void }) => {\r\n    const [res] = await Promise.all([loginRequest(values)])\r\n\r\n    if (res && res.data && res.data.token) {\r\n      dispatch(login(res.data))\r\n      navigate('/', { replace: true })\r\n    } else {\r\n      setError(true)\r\n    }\r\n\r\n    resetForm()\r\n    setShowPassword(false)\r\n  }\r\n\r\n  const handleTogglePasswordVisibility = () => {\r\n    setShowPassword((showPassword) => !showPassword)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem('token')) {\r\n      navigate('/', { replace: true })\r\n    } else {\r\n      setIsLoading(false)\r\n    }\r\n  }, [navigate])\r\n\r\n  if (isLoading) {\r\n    return <VscLoading />\r\n  }\r\n\r\n  return (\r\n    <Box className={styles['login-container']}>\r\n      <Box className={styles['login-wrapper']}>\r\n        <h1 className={styles['login-title']}>EASY TOURNEY</h1>\r\n        <Formik\r\n          initialValues={{\r\n            email: '',\r\n            password: ''\r\n          }}\r\n          validationSchema={LoginSchema}\r\n          onSubmit={handleSubmitForm}\r\n          validateOnBlur={true}\r\n          validateOnChange={false}\r\n          validateOnMount={true}\r\n        >\r\n          {(formProps: FormikProps<any>) => (\r\n            <Form onSubmit={formProps.handleSubmit} className={styles['login-form']}>\r\n              <Stack spacing={2} width={'60vw'} maxWidth={450}>\r\n                {error && (\r\n                  <Alert className={styles['login-alert-message']} severity=\"error\">\r\n                    Login failed! Incorrect username or password\r\n                  </Alert>\r\n                )}\r\n                <Field\r\n                  as={TextField}\r\n                  color={formProps.touched.email && formProps.errors.email && 'error'}\r\n                  error={formProps.touched.email && formProps.errors.email ? true : false}\r\n                  fullWidth\r\n                  id=\"email-login\"\r\n                  label=\"Email\"\r\n                  name=\"email\"\r\n                  placeholder=\"Email address\"\r\n                  type=\"email\"\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <PersonOutline />\r\n                      </InputAdornment>\r\n                    )\r\n                  }}\r\n                />\r\n                <span className={styles['error-message']}>\r\n                  <ErrorMessage name=\"email\" />\r\n                </span>\r\n              </Stack>\r\n              <Stack spacing={2} width={'60vw'} maxWidth={450}>\r\n                <Field\r\n                  as={TextField}\r\n                  color={formProps.touched.password && formProps.errors.password && 'error'}\r\n                  error={formProps.touched.password && formProps.errors.password ? true : false}\r\n                  fullWidth\r\n                  id=\"password-login\"\r\n                  label=\"Password\"\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  type={showPassword ? 'text' : 'password'}\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <LockOutlined />\r\n                      </InputAdornment>\r\n                    ),\r\n\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton onClick={handleTogglePasswordVisibility}>\r\n                          {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    )\r\n                  }}\r\n                />\r\n                <span className={styles['error-message']}>\r\n                  <ErrorMessage name=\"password\" />\r\n                </span>\r\n              </Stack>\r\n              <Button\r\n                className={styles['submit-login-btn']}\r\n                // disabled={!formProps.isValid || !formProps.dirty}\r\n                size=\"large\"\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n              >\r\n                Login\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import axios from '../../config/axios-config'\r\nimport {UserResponse} from \"../../../types/user\";\r\n\r\nexport const loginRequest = (data: any) =>\r\n    axios({\r\n       url: \"/auth/login\",\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        data: data,\r\n    })as unknown as UserResponse;","export const EMAIL_REGEX =\r\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\nexport const CHARACTERS_REGEX = /^[\\p{L}0-9]+(?:\\s[\\p{L}0-9]+)*$/u\r\nexport const CHARACTERS_ONLY_REGEX = /^[\\p{L}]+(?:\\s[\\p{L}]+)*$/u\r\nexport const SPACE_START_REGEX = /^\\s/u\r\nexport const SPACE_END_REGEX = /\\s$/u\r\nexport const PHONE_NUMBER_START_REGEX = /^0\\d*$/\r\nexport const PHONE_NUMBER_REGEX = /^\\d*$/\r\n","import * as Yup from 'yup'\r\nimport {\r\n  EMAIL_REGEX,\r\n  SPACE_END_REGEX,\r\n  SPACE_START_REGEX,\r\n  CHARACTERS_REGEX,\r\n  PHONE_NUMBER_REGEX,\r\n  CHARACTERS_ONLY_REGEX,\r\n  PHONE_NUMBER_START_REGEX\r\n} from '../../constants/regex'\r\n\r\nconst email = Yup.string()\r\n  .required('Email is required.')\r\n  .max(50, 'Email cannot be more than 50 characters')\r\n  .matches(EMAIL_REGEX, 'Please enter a valid email address.')\r\n\r\nconst password = Yup.string().trim().required('Password is required.').min(6, 'Password must be at least 6 characters')\r\n\r\nconst categoryName = Yup.string()\r\n  .required('Please enter category name')\r\n  .test('no-leading-whitespace', 'Category name must not contain leading whitespace', function (value) {\r\n    if (value && SPACE_START_REGEX.test(value)) {\r\n      return false\r\n    }\r\n    return true\r\n  })\r\n  .test('no-trailing-whitespace', 'Category name must not contain trailing whitespace', function (value) {\r\n    if (value && SPACE_END_REGEX.test(value)) {\r\n      return false\r\n    }\r\n    return true\r\n  })\r\n  .min(2, 'Category name must be at least 2 characters')\r\n  .max(30, 'Category name must be less than 30 characters')\r\n  .matches(CHARACTERS_REGEX, 'Category name must not contain special characters')\r\n\r\nconst firstName = Yup.string()\r\n  .required('First name is required')\r\n  .max(30, 'First name cannot be more than 30 characters')\r\n  .matches(CHARACTERS_ONLY_REGEX, 'First name must not contain special characters')\r\n\r\nconst lastName = Yup.string()\r\n  .required('Last name is required')\r\n  .max(30, 'Last name cannot be more than 30 characters')\r\n  .matches(CHARACTERS_ONLY_REGEX, 'Last name must not contain special characters')\r\n\r\nconst phoneNumber = Yup.string()\r\n  .required('Phone number is required')\r\n  .matches(PHONE_NUMBER_REGEX, 'Phone number must not contain special characters')\r\n  .matches(PHONE_NUMBER_START_REGEX, 'Phone number must start with 0')\r\n  .min(10, 'Phone number cannot be less than 10 digits')\r\n  .max(11, 'Phone number cannot be more than 11 digits')\r\n\r\nconst title = Yup.string()\r\n  .required('Please enter Title')\r\n  .test('no-leading-whitespace', 'Title must not contain leading whitespace', function (value) {\r\n    if (value && SPACE_START_REGEX.test(value)) {\r\n      return false\r\n    }\r\n    return true\r\n  })\r\n  .test('no-trailing-whitespace', 'Title must not contain trailing whitespace', function (value) {\r\n    if (value && SPACE_END_REGEX.test(value)) {\r\n      return false\r\n    }\r\n    return true\r\n  })\r\n  .min(2, 'Title must be at least 2 characters')\r\n  .max(30, 'Title must be less than 30 characters')\r\n  .matches(CHARACTERS_REGEX, 'Title must not contain special characters')\r\nconst selectCategory = Yup.string().required('Category is required.')\r\nexport { email, password, categoryName, firstName, lastName, phoneNumber, title, selectCategory }\r\n"],"names":["LoginSchema","Yup","shape","email","password","Login","showPassword","setShowPassword","useState","navigate","useNavigate","error","setError","dispatch","useDispatch","isLoading","setIsLoading","handleTogglePasswordVisibility","useEffect","localStorage","getItem","replace","_jsx","VscLoading","Box","className","styles","children","_jsxs","Formik","initialValues","validationSchema","onSubmit","async","values","_ref","resetForm","res","Promise","all","data","axios","url","method","headers","token","login","validateOnBlur","validateOnChange","validateOnMount","formProps","Form","handleSubmit","Stack","spacing","width","maxWidth","Alert","severity","Field","as","TextField","color","touched","errors","fullWidth","id","label","name","placeholder","type","variant","InputProps","startAdornment","InputAdornment","position","PersonOutline","ErrorMessage","LockOutlined","endAdornment","IconButton","onClick","VisibilityOff","Visibility","Button","size","CHARACTERS_REGEX","CHARACTERS_ONLY_REGEX","SPACE_START_REGEX","SPACE_END_REGEX","required","max","matches","trim","min","categoryName","test","value","title","selectCategory"],"sourceRoot":""}