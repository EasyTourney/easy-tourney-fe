{"version":3,"file":"static/js/427.5032aaf0.chunk.js","mappings":"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","sources":["apis/config/axios-config.ts","services/validator/auth.validator.ts","webpack://easy-tourney-fe/./src/pages/Login/Login.module.css?b420","pages/Login/Login.tsx","apis/axios/auth/login.ts","constants/regex.ts","services/validator/common.ts"],"sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'http://easy-tourney.mgm-edv.de/api',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\ninstance.interceptors.request.use(\r\n  function (config) {\r\n    const accessToken = window.localStorage.getItem('token');\r\n    if (accessToken) {\r\n      config.headers['Authorization'] = 'Bearer ' + accessToken\r\n    }\r\n    return config\r\n  },\r\n  function (error) {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\ninstance.interceptors.response.use(\r\n  function (response: AxiosResponse) {\r\n    return response?.data\r\n  },\r\n  function (error) {\r\n    return error.response?.data\r\n  }\r\n)\r\n\r\nexport default instance\r\n","import * as Yup from \"yup\";\r\nimport { email, password } from \"./common\";\r\n\r\nexport const LoginSchema = Yup.object().shape({\r\n\temail,\r\n\tpassword,\r\n});\r\n","// extracted by mini-css-extract-plugin\nexport default {\"login-container\":\"Login_login-container__JYrRI\",\"login-wrapper\":\"Login_login-wrapper__26I76\",\"login-form\":\"Login_login-form__ZTp6w\",\"login-title\":\"Login_login-title__UVx7E\",\"error-message\":\"Login_error-message__f4XYc\",\"login-alert-message\":\"Login_login-alert-message__qz92v\",\"submit-login-btn\":\"Login_submit-login-btn__LpaPe\"};","import React, { useEffect, useState } from 'react'\r\nimport { Formik, Field, Form, ErrorMessage, FormikProps } from 'formik'\r\nimport { LoginSchema } from '../../services/validator/auth.validator'\r\nimport { Alert, Box, Button, IconButton, InputAdornment, Stack, TextField } from '@mui/material'\r\nimport { LoginForm } from './Login.types'\r\nimport { LockOutlined, PersonOutline, Visibility, VisibilityOff } from '@mui/icons-material'\r\nimport styles from './Login.module.css'\r\nimport { loginRequest } from '../../apis/axios/auth/login'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { login } from '../../redux/reducers/auth/auth.reducer'\r\nimport { VscLoading } from 'react-icons/vsc'\r\n\r\nconst Login: React.FC = () => {\r\n  const [showPassword, setShowPassword] = useState(false)\r\n  const navigate = useNavigate()\r\n  const [error, setError] = useState(false)\r\n  const dispatch = useDispatch()\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  const handleSubmitForm = async (values: LoginForm, { resetForm }: { resetForm: () => void }) => {\r\n    const [res] = await Promise.all([loginRequest(values)])\r\n\r\n    if (res && res.data && res.data.token) {\r\n      dispatch(login(res.data))\r\n      navigate('/', { replace: true })\r\n    } else {\r\n      setError(true)\r\n    }\r\n\r\n    resetForm()\r\n    setShowPassword(false)\r\n  }\r\n\r\n  const handleTogglePasswordVisibility = () => {\r\n    setShowPassword((showPassword) => !showPassword)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem('token')) {\r\n      navigate('/', { replace: true })\r\n    } else {\r\n      setIsLoading(false)\r\n    }\r\n  }, [navigate])\r\n\r\n  if (isLoading) {\r\n    return <VscLoading />\r\n  }\r\n\r\n  return (\r\n    <Box className={styles['login-container']}>\r\n      <Box className={styles['login-wrapper']}>\r\n        <h1 className={styles['login-title']}>EASY TOURNEY</h1>\r\n        <Formik\r\n          initialValues={{\r\n            email: '',\r\n            password: ''\r\n          }}\r\n          validationSchema={LoginSchema}\r\n          onSubmit={handleSubmitForm}\r\n          validateOnBlur={true}\r\n          validateOnChange={false}\r\n          validateOnMount={true}\r\n        >\r\n          {(formProps: FormikProps<any>) => (\r\n            <Form onSubmit={formProps.handleSubmit} className={styles['login-form']}>\r\n              <Stack spacing={2} width={'60vw'} maxWidth={450}>\r\n                {error && (\r\n                  <Alert className={styles['login-alert-message']} severity=\"error\">\r\n                    Login failed! Incorrect username or password\r\n                  </Alert>\r\n                )}\r\n                <Field\r\n                  as={TextField}\r\n                  color={formProps.touched.email && formProps.errors.email && 'error'}\r\n                  error={formProps.touched.email && formProps.errors.email ? true : false}\r\n                  fullWidth\r\n                  id=\"email-login\"\r\n                  label=\"Email\"\r\n                  name=\"email\"\r\n                  placeholder=\"Email address\"\r\n                  type=\"email\"\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <PersonOutline />\r\n                      </InputAdornment>\r\n                    )\r\n                  }}\r\n                />\r\n                <span className={styles['error-message']}>\r\n                  <ErrorMessage name=\"email\" />\r\n                </span>\r\n              </Stack>\r\n              <Stack spacing={2} width={'60vw'} maxWidth={450}>\r\n                <Field\r\n                  as={TextField}\r\n                  color={formProps.touched.password && formProps.errors.password && 'error'}\r\n                  error={formProps.touched.password && formProps.errors.password ? true : false}\r\n                  fullWidth\r\n                  id=\"password-login\"\r\n                  label=\"Password\"\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  type={showPassword ? 'text' : 'password'}\r\n                  variant=\"outlined\"\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <LockOutlined />\r\n                      </InputAdornment>\r\n                    ),\r\n\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton onClick={handleTogglePasswordVisibility}>\r\n                          {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    )\r\n                  }}\r\n                />\r\n                <span className={styles['error-message']}>\r\n                  <ErrorMessage name=\"password\" />\r\n                </span>\r\n              </Stack>\r\n              <Button\r\n                className={styles['submit-login-btn']}\r\n                // disabled={!formProps.isValid || !formProps.dirty}\r\n                size=\"large\"\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n              >\r\n                Login\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import axios from '../../config/axios-config'\r\nimport {UserResponse} from \"../../../types/user\";\r\n\r\nexport const loginRequest = (data: any) =>\r\n    axios({\r\n       url: \"/auth/login\",\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        data: data,\r\n    })as unknown as UserResponse;","export const EMAIL_REGEX =\r\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\nexport const CHARACTERS_REGEX = /^[\\p{L}0-9]+(?:\\s[\\p{L}0-9]+)*$/u\r\nexport const CHARACTERS_ONLY_REGEX = /^[\\p{L}]+(?:\\s[\\p{L}]+)*$/u\r\nexport const SPACE_START_REGEX = /^\\s/u\r\nexport const SPACE_END_REGEX = /\\s$/u\r\nexport const PHONE_NUMBER_START_REGEX = /^0\\d*$/\r\nexport const PHONE_NUMBER_REGEX = /^\\d*$/\r\n","import * as Yup from 'yup'\r\nimport {\r\n  EMAIL_REGEX,\r\n  SPACE_END_REGEX,\r\n  SPACE_START_REGEX,\r\n  CHARACTERS_REGEX,\r\n  PHONE_NUMBER_REGEX,\r\n  CHARACTERS_ONLY_REGEX,\r\n  PHONE_NUMBER_START_REGEX\r\n} from '../../constants/regex'\r\n\r\nconst email = Yup.string()\r\n  .required('Email is required.')\r\n  .max(50, 'Email cannot be more than 50 characters')\r\n  .matches(EMAIL_REGEX, 'Please enter a valid email address.')\r\n\r\nconst password = Yup.string().trim().required('Password is required.').min(6, 'Password must be at least 6 characters')\r\n\r\nconst categoryName = Yup.string()\r\n  .required('Please enter category name')\r\n  .test('no-leading-whitespace', 'Category name must not contain leading whitespace', function (value) {\r\n    if (value && SPACE_START_REGEX.test(value)) {\r\n      return false\r\n    }\r\n    return true\r\n  })\r\n  .test('no-trailing-whitespace', 'Category name must not contain trailing whitespace', function (value) {\r\n    if (value && SPACE_END_REGEX.test(value)) {\r\n      return false\r\n    }\r\n    return true\r\n  })\r\n  .min(2, 'Category name must be at least 2 characters')\r\n  .max(30, 'Category name must be less than 30 characters')\r\n  .matches(CHARACTERS_REGEX, 'Category name must not contain special characters')\r\n\r\nconst firstName = Yup.string()\r\n  .required('First name is required')\r\n  .max(30, 'First name cannot be more than 30 characters')\r\n  .matches(CHARACTERS_ONLY_REGEX, 'First name must not contain special characters')\r\n\r\nconst lastName = Yup.string()\r\n  .required('Last name is required')\r\n  .max(30, 'Last name cannot be more than 30 characters')\r\n  .matches(CHARACTERS_ONLY_REGEX, 'Last name must not contain special characters')\r\n\r\nconst phoneNumber = Yup.string()\r\n  .required('Phone number is required')\r\n  .matches(PHONE_NUMBER_REGEX, 'Phone number must not contain special characters')\r\n  .matches(PHONE_NUMBER_START_REGEX, 'Phone number must start with 0')\r\n  .min(10, 'Phone number cannot be less than 10 digits')\r\n  .max(11, 'Phone number cannot be more than 11 digits')\r\n\r\nexport { email, password, categoryName, firstName, lastName, phoneNumber }\r\n"],"names":["instance","axios","create","baseURL","headers","interceptors","request","use","config","accessToken","window","localStorage","getItem","error","Promise","reject","response","data","_error$response","LoginSchema","Yup","shape","email","password","Login","showPassword","setShowPassword","useState","navigate","useNavigate","setError","dispatch","useDispatch","isLoading","setIsLoading","handleTogglePasswordVisibility","useEffect","replace","_jsx","VscLoading","Box","className","styles","children","_jsxs","Formik","initialValues","validationSchema","onSubmit","async","values","_ref","resetForm","res","all","url","method","token","login","validateOnBlur","validateOnChange","validateOnMount","formProps","Form","handleSubmit","Stack","spacing","width","maxWidth","Alert","severity","Field","as","TextField","color","touched","errors","fullWidth","id","label","name","placeholder","type","variant","InputProps","startAdornment","InputAdornment","position","PersonOutline","ErrorMessage","LockOutlined","endAdornment","IconButton","onClick","VisibilityOff","Visibility","Button","size","CHARACTERS_ONLY_REGEX","SPACE_START_REGEX","SPACE_END_REGEX","required","max","matches","trim","min","categoryName","test","value"],"sourceRoot":""}