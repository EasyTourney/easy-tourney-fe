{"version":3,"file":"static/js/389.033707ce.chunk.js","mappings":"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","sources":["redux/reducers/categories/categories.selectors.ts","services/validator/tournament.validator.ts","components/Dialog/Tournament/DialogAddTournament.tsx","layouts/Tournament/index.tsx","constants/regex.ts","services/validator/common.ts"],"sourcesContent":["export const categoriesSelector = (state: any) => state.category\r\n","import * as Yup from 'yup'\r\nimport { selectCategory, title } from './common'\r\n\r\nexport const TournamentSchema = Yup.object().shape({\r\n  title,\r\n  selectCategory\r\n})\r\n","import 'react-day-picker/dist/style.css'\r\nimport Button from '@mui/material/Button'\r\nimport Box from '@mui/material/Box'\r\nimport Dialog from '@mui/material/Dialog'\r\nimport DialogActions from '@mui/material/DialogActions'\r\nimport DialogContent from '@mui/material/DialogContent'\r\nimport DialogTitle from '@mui/material/DialogTitle'\r\nimport RestartAltOutlinedIcon from '@mui/icons-material/RestartAltOutlined'\r\nimport moment from 'moment'\r\nimport { useEffect, useState } from 'react'\r\nimport { FormControl, FormHelperText, MenuItem, Select, TextField } from '@mui/material'\r\nimport { format, isSameDay } from 'date-fns'\r\nimport { DayClickEventHandler, DateFormatter, DayPicker } from 'react-day-picker'\r\nimport { useFormik } from 'formik'\r\nimport { toast } from 'react-toastify'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { categoriesSelector } from '../../../redux/reducers/categories/categories.selectors'\r\nimport { getCategories } from '../../../redux/reducers/categories/categories.slice'\r\nimport { TournamentSchema } from '../../../services/validator/tournament.validator'\r\nimport { CategoryName } from '../../../types/category'\r\nimport { ThunkDispatch } from '@reduxjs/toolkit'\r\n\r\ninterface TournamentProps {\r\n  open: boolean\r\n  setOpen: (value: boolean) => void\r\n}\r\n\r\nconst DialogAddTournament = ({ open, setOpen }: TournamentProps) => {\r\n  const [selectedDays, setSelectedDays] = useState<Date[]>([])\r\n  const [isSaving, setIsSaving] = useState<boolean>(true)\r\n  const [error, setError] = useState<boolean>(false)\r\n  const { listCategory } = useSelector(categoriesSelector)\r\n  const dispatch = useDispatch<ThunkDispatch<any, any, any>>()\r\n\r\n  const today = new Date()\r\n\r\n  const seasonEmoji: Record<string, string> = {\r\n    winter: '⛄️',\r\n    spring: '🌸',\r\n    summer: '🌻',\r\n    autumn: '🍂'\r\n  }\r\n\r\n  const getSeason = (month: Date): string => {\r\n    const monthNumber = month.getMonth()\r\n    if (monthNumber >= 0 && monthNumber < 3) return 'winter'\r\n    if (monthNumber >= 3 && monthNumber < 6) return 'spring'\r\n    if (monthNumber >= 6 && monthNumber < 9) return 'summer'\r\n    else return 'autumn'\r\n  }\r\n\r\n  const formatCaption: DateFormatter = (month, options) => {\r\n    const season = getSeason(month)\r\n\r\n    const year = month.getFullYear()\r\n    return (\r\n      <>\r\n        <Box component=\"span\" role=\"img\" aria-label={season}>\r\n          {seasonEmoji[season]}\r\n        </Box>\r\n        {format(month, 'LLLL', { locale: options?.locale })} {year}\r\n      </>\r\n    )\r\n  }\r\n\r\n  const handleDayClick: DayClickEventHandler = (day, modifiers) => {\r\n    if (modifiers.disabled) {\r\n      return\r\n    }\r\n\r\n    const newSelectedDays = [...selectedDays]\r\n\r\n    if (modifiers.selected) {\r\n      const index = selectedDays.findIndex((selectedDay) => isSameDay(day, selectedDay))\r\n      newSelectedDays.splice(index, 1)\r\n    } else {\r\n      newSelectedDays.push(day)\r\n    }\r\n    setSelectedDays(newSelectedDays)\r\n  }\r\n  const handleResetClick = () => setSelectedDays([])\r\n\r\n  const disabledDays = {\r\n    before: today // Prevents selection of days before the current date\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(getCategories())\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    if (selectedDays?.length > 0) {\r\n      setIsSaving(false)\r\n    }\r\n  }, [selectedDays])\r\n\r\n  let footer = (\r\n    <Box component=\"span\" sx={{ padding: '0 0.5rem', fontSize: '0.9rem' }}>\r\n      Please pick one or more days.\r\n    </Box>\r\n  )\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      title: '',\r\n      selectCategory: ''\r\n    },\r\n    validationSchema: TournamentSchema,\r\n    onSubmit: async (value) => {\r\n      try {\r\n        if (selectedDays.length === 0) {\r\n          setError(true)\r\n        } else {\r\n          toast.success('Tournament is created successfully!')\r\n          formik.resetForm()\r\n\r\n          setError(false)\r\n          handleResetClick()\r\n          handleClose()\r\n          if (selectedDays) {\r\n            const formatDate = selectedDays?.map((day) => moment(day).format('YYYY-MM-DD'))\r\n            console.log({ value, formatDate }) // consoleLog data\r\n          }\r\n        }\r\n      } catch (error) {\r\n        toast.error('An error occurred while creating the catalog!')\r\n      }\r\n    }\r\n  })\r\n  if (selectedDays.length > 0)\r\n    footer = (\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '0.8rem 0.5rem' }}>\r\n        <Box sx={{ fontSize: '0.9rem', display: 'flex', gap: '0.5rem' }}>\r\n          You selected{' '}\r\n          <Box component=\"span\" sx={{ fontStyle: 'italic', color: 'red' }}>\r\n            {selectedDays.length}\r\n          </Box>{' '}\r\n          days.{' '}\r\n        </Box>\r\n        <Button onClick={handleResetClick} title=\"Reset\">\r\n          {' '}\r\n          <RestartAltOutlinedIcon />\r\n        </Button>\r\n      </Box>\r\n    )\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n    formik.resetForm()\r\n    setError(false)\r\n  }\r\n  const handleClickOutside = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (event.target === event.currentTarget) {\r\n      if (formik.isValid) {\r\n        handleClose()\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        onClick={handleClickOutside}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\" sx={{ textAlign: 'center', fontWeight: 'bold' }}>\r\n          {'CREATE TOURNAMENT'}\r\n        </DialogTitle>{' '}\r\n        {/* search font beautiful more */}\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <DialogContent\r\n            sx={{\r\n              paddingTop: '1rem !important',\r\n              width: '400px',\r\n              transition: 'height 0.3s ease-in-out',\r\n              height: 'auto'\r\n            }}\r\n          >\r\n            <FormControl fullWidth sx={{ mb: '1rem' }}>\r\n              <Box component=\"label\" sx={{ fontWeight: 'bold', paddingBottom: '0.2rem' }}>\r\n                Title:\r\n              </Box>\r\n              <TextField\r\n                id=\"title\"\r\n                name=\"title\"\r\n                value={formik.values.title}\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}\r\n                error={formik.touched.title && Boolean(formik.errors.title)}\r\n                helperText={formik.touched.title && formik.errors.title}\r\n                variant=\"outlined\"\r\n                placeholder=\"Enter your title\"\r\n                sx={{\r\n                  '& .MuiOutlinedInput-input': {\r\n                    padding: '9px 10px'\r\n                  },\r\n                  '& .MuiInputLabel-root': {\r\n                    top: '-5px'\r\n                  }\r\n                }}\r\n              />\r\n            </FormControl>\r\n            <FormControl fullWidth sx={{ mb: '1rem' }}>\r\n              <Box component=\"label\" sx={{ fontWeight: 'bold', paddingBottom: '0.2rem' }}>\r\n                Category:\r\n              </Box>\r\n              <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"selectCategory\"\r\n                name=\"selectCategory\"\r\n                value={formik.values.selectCategory}\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}\r\n                error={formik.touched.selectCategory && Boolean(formik.errors.selectCategory)}\r\n                displayEmpty\r\n                sx={{\r\n                  '& .MuiOutlinedInput-input': {\r\n                    padding: '9px 10px'\r\n                  }\r\n                }}\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>--Choose--</em>\r\n                </MenuItem>\r\n                {listCategory?.map((category: CategoryName) => (\r\n                  <MenuItem value={category.categoryName} key={category.categoryId}>\r\n                    {category.categoryName}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              <FormHelperText sx={{ color: 'red' }}>\r\n                {formik.touched.selectCategory && formik.errors.selectCategory}\r\n              </FormHelperText>\r\n            </FormControl>\r\n\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>\r\n              <Box component=\"label\" sx={{ fontWeight: 'bold' }}>\r\n                Event dates:{' '}\r\n                {error && (\r\n                  <Box component=\"span\" sx={{ fontSize: '0.75rem', color: 'red', fontWeight: '400' }}>\r\n                    Event dates is required\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n              <DayPicker\r\n                onDayClick={handleDayClick}\r\n                selected={selectedDays}\r\n                disabled={disabledDays}\r\n                footer={footer}\r\n                formatters={{ formatCaption }}\r\n                fromYear={2020}\r\n                toYear={2025}\r\n                mode=\"multiple\"\r\n              />\r\n            </Box>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose}>Cancel</Button>\r\n            <Button type=\"submit\" disabled={isSaving} variant=\"contained\">\r\n              Save\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DialogAddTournament\r\n","import 'react-day-picker/dist/style.css'\r\nimport Button from '@mui/material/Button'\r\nimport DialogAddTournament from '../../components/Dialog/Tournament/DialogAddTournament'\r\nimport { useState } from 'react'\r\nimport { Box } from '@mui/material'\r\n\r\nconst Tournament = () => {\r\n  const [open, setOpen] = useState(false)\r\n  const handleClickOpen = () => {\r\n    setOpen(true)\r\n  }\r\n  return (\r\n    <Box sx={{ mt: '1rem' }}>\r\n      <Button onClick={handleClickOpen} style={{ backgroundColor: '#24292e', color: 'white' }}>\r\n        Add new\r\n      </Button>\r\n      {open && <DialogAddTournament open={open} setOpen={setOpen} />}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Tournament\r\n","export const EMAIL_REGEX =\r\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\nexport const CHARACTERS_REGEX = /^[\\p{L}0-9]+(?:\\s[\\p{L}0-9]+)*$/u\r\nexport const CHARACTERS_ONLY_REGEX = /^[\\p{L}]+(?:\\s[\\p{L}]+)*$/u\r\nexport const SPACE_START_REGEX = /^\\s/u\r\nexport const SPACE_END_REGEX = /\\s$/u\r\nexport const PHONE_NUMBER_START_REGEX = /^0\\d*$/\r\nexport const PHONE_NUMBER_REGEX = /^\\d*$/\r\nexport const MULTIPLE_SPACE_REGEX = /\\s{2,}/\r\n","import * as Yup from 'yup'\r\nimport {\r\n  EMAIL_REGEX,\r\n  SPACE_END_REGEX,\r\n  SPACE_START_REGEX,\r\n  CHARACTERS_REGEX,\r\n  PHONE_NUMBER_REGEX,\r\n  CHARACTERS_ONLY_REGEX,\r\n  PHONE_NUMBER_START_REGEX,\r\n  MULTIPLE_SPACE_REGEX\r\n} from '../../constants/regex'\r\n\r\nconst email = Yup.string()\r\n  .required('Email is required.')\r\n  .max(50, 'Email cannot be more than 50 characters')\r\n  .matches(EMAIL_REGEX, 'Please enter a valid email address.')\r\n\r\nconst password = Yup.string().trim().required('Password is required.').min(6, 'Password must be at least 6 characters')\r\n\r\nconst categoryName = Yup.string()\r\n  .required('Please enter category name')\r\n  .test('no-leading-whitespace', 'Category name must not contain leading whitespace', function (value) {\r\n    if (value && SPACE_START_REGEX.test(value)) {\r\n      return false\r\n    }\r\n    return true\r\n  })\r\n  .test('no-trailing-whitespace', 'Category name must not contain trailing whitespace', function (value) {\r\n    if (value && SPACE_END_REGEX.test(value)) {\r\n      return false\r\n    }\r\n    return true\r\n  })\r\n  .min(2, 'Category name must be at least 2 characters')\r\n  .max(30, 'Category name must be less than 30 characters')\r\n  .matches(CHARACTERS_REGEX, 'Category name must not contain special characters')\r\n\r\nconst firstName = Yup.string()\r\n  .required('First name is required')\r\n  .max(30, 'First name cannot be more than 30 characters')\r\n  .matches(CHARACTERS_ONLY_REGEX, 'First name must not contain special characters')\r\n\r\nconst lastName = Yup.string()\r\n  .required('Last name is required')\r\n  .max(30, 'Last name cannot be more than 30 characters')\r\n  .matches(CHARACTERS_ONLY_REGEX, 'Last name must not contain special characters')\r\n\r\nconst phoneNumber = Yup.string()\r\n  .required('Phone number is required')\r\n  .matches(PHONE_NUMBER_REGEX, 'Phone number must not contain special characters')\r\n  .matches(PHONE_NUMBER_START_REGEX, 'Phone number must start with 0')\r\n  .min(10, 'Phone number cannot be less than 10 digits')\r\n  .max(11, 'Phone number cannot be more than 11 digits')\r\n\r\nconst title = Yup.string()\r\n  .required('Please enter Title')\r\n  .test('no-leading-whitespace', 'Title must not contain leading whitespace', function (value) {\r\n    if (value && SPACE_START_REGEX.test(value)) {\r\n      return false\r\n    }\r\n    return true\r\n  })\r\n  .test('no-trailing-whitespace', 'Title must not contain trailing whitespace', function (value) {\r\n    if (value && SPACE_END_REGEX.test(value)) {\r\n      return false\r\n    }\r\n    return true\r\n  })\r\n  .test(\r\n    'no-multiple-whitespaces',\r\n    'Title must not contain multiple whitespaces in between two words',\r\n    function (value) {\r\n      if (value && MULTIPLE_SPACE_REGEX.test(value)) {\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n  )\r\n  .min(2, 'Title must be at least 2 characters')\r\n  .max(30, 'Title must be less than 30 characters')\r\n  .matches(CHARACTERS_REGEX, 'Title must not contain special characters')\r\n\r\nconst selectCategory = Yup.string().required('Category is required.')\r\nexport { email, password, categoryName, firstName, lastName, phoneNumber, title, selectCategory }\r\n"],"names":["categoriesSelector","state","category","TournamentSchema","Yup","shape","title","selectCategory","_ref","open","setOpen","selectedDays","setSelectedDays","useState","isSaving","setIsSaving","error","setError","listCategory","useSelector","dispatch","useDispatch","today","Date","seasonEmoji","winter","spring","summer","autumn","handleResetClick","disabledDays","before","useEffect","getCategories","length","footer","_jsx","Box","component","sx","padding","fontSize","children","formik","useFormik","initialValues","validationSchema","onSubmit","async","toast","success","resetForm","handleClose","formatDate","map","day","moment","format","console","log","value","_jsxs","display","justifyContent","alignItems","gap","fontStyle","color","Button","onClick","RestartAltOutlinedIcon","_Fragment","Dialog","onClose","event","target","currentTarget","isValid","DialogTitle","id","textAlign","fontWeight","handleSubmit","DialogContent","paddingTop","width","transition","height","FormControl","fullWidth","mb","paddingBottom","TextField","name","values","onChange","handleChange","onBlur","handleBlur","touched","Boolean","errors","helperText","variant","placeholder","top","Select","labelId","displayEmpty","MenuItem","categoryName","categoryId","FormHelperText","flexDirection","DayPicker","onDayClick","handleDayClick","modifiers","disabled","newSelectedDays","selected","index","findIndex","selectedDay","isSameDay","splice","push","formatters","formatCaption","month","options","season","monthNumber","getMonth","getSeason","year","getFullYear","role","locale","fromYear","toYear","mode","DialogActions","type","Tournament","mt","handleClickOpen","style","backgroundColor","DialogAddTournament","CHARACTERS_REGEX","CHARACTERS_ONLY_REGEX","SPACE_START_REGEX","SPACE_END_REGEX","MULTIPLE_SPACE_REGEX","email","required","max","matches","password","trim","min","test"],"sourceRoot":""}